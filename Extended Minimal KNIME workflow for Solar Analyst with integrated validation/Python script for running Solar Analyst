# import python packages and solar analyst module

import pandas as pd
import simpledbf
from simpledbf import Dbf5
import arcpy 
from arcpy import env
from arcpy.sa import *
import os
import pandas as pd

#set the environment 
env.workspace = "H:/Solar_Analyst_Workflow/Test"
arcpy.env.overwriteOutput=True

#check out the spatial analyst extension in ArcMap
arcpy.CheckOutExtension("Spatial")

#set the input data and parameter settings 
RasterDEM = flow_variables['ASCII Raster'] 
latitude = flow_variables['Latitude']
skysize = input_table.at['Row0','skysize']
timeConfig = TimeMultipleDays(2016,1 ,31)
dayInterval = 14
hourInterval = 0.5
zFactor = 1
calcDirections = input_table.at['Row0','calcDirections']
zenithDivisions = input_table.at['Row0','zenithDivisions']
azimuthDivisions = input_table.at['Row0','azimuthDivisions']
diffuseProp = input_table.at['Row0','diffuseProp']
transmittivity = input_table.at['Row0','transmittivity']
outDir_Rad = ""
outDiff_Rad = ""
outDirectDur = ""

#execute area solar radiation 
outGlobalRad = AreaSolarRadiation(RasterDEM, latitude, skysize, timeConfig,
   dayInterval, hourInterval, "NOINTERVAL", zFactor, "FLAT_SURFACE",
   calcDirections, zenithDivisions, azimuthDivisions, "STANDARD_OVERCAST_SKY",
   diffuseProp, transmittivity, outDir_Rad, outDiff_Rad, outDirectDur)

#delete existing file
#if arcpy.Exists(jan_roof):
   # arcpy.Delete_management(jan_roof)
    
#save solar map 
#if arcpy.Exists("C:/Datasource/ArcGISfolder/output/jan_rad"):
    #arcpy.Delete_management("C:/Datasource/ArcGISfolder/output/jan_rad")
outGlobalRad.save("H:/Solar_Analyst_Workflow/Test/solar_map")

#set local variables
#inRaster = "C:/Datasource/ArcGISfolder/output/jan_rad"
#outASCII = "C:/Datasource/ArcGISfolder/output/Ascii/jan_rad_ascii.asc"

#Execute RasterToASCII
#arcpy.RasterToASCII_conversion(inRaster, outASCII)

#Set local variables
roof_solar_raster = outGlobalRad
outPoint = "H:/Solar_Analyst_Workflow/Test/solar_points.shp" 
field = "VALUE"

# Execute RasterToPoint
arcpy.RasterToPoint_conversion(roof_solar_raster, outPoint, field)

# Set local variable
in_features = "solar_points.shp" 

# Set local variables
in_data= "solar_points.shp"
in_features = "solar_points_XY.shp"

# Copying data to preserve original dataset
# Execute Copy
#arcpy.Copy_management(in_data, in_features)

#Execute AddXY
arcpy.AddXY_management(in_features)

#output table from DBF to DATA FRAME
dbf = Dbf5('H:/Solar_Analyst_Workflow/Test/solar_points_XY.dbf')
df = dbf.to_dataframe()
df = df.rename(columns={'GRID_CODE': 'Radiation (kWh/m2)', 'POINTID': 'ID', 'POINT_X' : 'X', 'POINT_Y' : 'Y'})
df['Radiation (kWh/m2)'] = df['Radiation (kWh/m2)']/1000
df = df[['ID', 'X', 'Y', 'Radiation (kWh/m2)']]
output_table = df
